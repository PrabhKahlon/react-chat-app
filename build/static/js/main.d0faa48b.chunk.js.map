{"version":3,"sources":["components/Message.js","components/Main.js","components/Login.js","App.js","reportWebVitals.js","index.js"],"names":["Message","props","message","join","className","username","leave","receive","role","aria-live","aria-atomic","id","Date","date","toLocaleString","weekday","hour","minute","data","Main","useState","setMessage","messageList","setMessageList","messagesEndRef","useRef","useEffect","socket","on","m","getTime","off","current","scrollIntoView","behavior","scrollToBottom","style","maxWidth","height","map","i","ref","onSubmit","event","preventDefault","msgObj","emit","type","placeholder","value","onChange","target","Login","user","setUser","width","maxHeight","changeUserName","htmlFor","name","App","setUsername","setSocket","io","disconnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0faa48b.chunk.js","sourcesContent":["import React from 'react'\n\n//Message component. \n//Renders the message received from the server\n//Props include a message object which contains {id: int, username: string, data: string, date: new Date(), receive: boolean, join: boolean, leave: boolean}\nexport default function Message(props) {\n\n    let receiveStyle = \"toast show mb-2\";\n    let sendStyle = \"toast show align-self-end mb-2\";\n\n    if(props.message.join) {\n        return (\n            <div className=\"mb-2 align-self-center\">\n                <p className=\"text-muted\">{props.message.username} has connected</p>\n            </div>\n        );\n    } else if (props.message.leave) {\n        return (\n            <div className=\"mb-2 align-self-center\">\n                <p className=\"text-muted\">{props.message.username} has disconnected</p>\n            </div>\n        );\n    } else {\n    return (\n        <div className={props.message.receive ? receiveStyle : sendStyle} role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\" id=\"messageReceived\">\n            <div className=\"toast-header\">\n                <strong className=\"me-auto\">{props.message.username}</strong>\n                <small>{new Date(props.message.date).toLocaleString([], {weekday: \"short\", hour: \"2-digit\", minute: \"2-digit\"})}</small>\n            </div>\n            <div className=\"toast-body\">\n                {props.message.data}\n            </div>\n        </div>\n    );\n    }\n}\n","import { React, useEffect, useState, useRef } from 'react'\nimport Message from './Message';\n\n//Main component\nexport default function Main(props) {\n    //Message to send\n    const [message, setMessage] = useState(\"\");\n    //List for all message received and sent\n    const [messageList, setMessageList] = useState([]);\n    const messagesEndRef = useRef(null);\n\n    useEffect(() => {\n        props.socket.on(\"messageReceive\", (data) => {\n            setMessageList(m => [...m, { id: data.id, username: data.username, data: data.data, date: new Date().getTime(), receive: true, join: data.join, leave: data.leave }]);\n        });\n        return () => {\n            props.socket.off(\"messageReceive\");\n        }\n    }, [props.socket]);\n\n    //Uses a ref to an empty div to scroll to the bottom so the latest messages are always in view.\n    function scrollToBottom() {\n        messagesEndRef.current?.scrollIntoView({behavior: \"smooth\"});\n    }\n\n    useEffect(() => {\n        scrollToBottom()\n    }, [messageList])\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        let msgObj = { id: props.socket.id, username: props.username, data: message, date: new Date().getTime(), receive: false };\n        props.socket.emit(\"messageSend\", msgObj);\n        setMessageList(m => [...m, msgObj]);\n        setMessage(\"\");\n    }\n\n    return (\n        <>\n            <div style={{ maxWidth: \"1200px\" }} className=\"container-fluid vh-100 border-start border-end border-secondary\">\n                <div style={{ height: \"93%\" }} className=\"d-flex flex-column overflow-auto p-1 pt-4\">\n                    {messageList.map((message, i) => {\n                        return (<Message key={i} message={message} />);\n                    })}\n                    <div ref={messagesEndRef}/>\n                </div>\n                <div style={{ height: \"7%\" }} className=\"mx-auto\">\n                    <form className=\"row align-items-center mx-auto\" onSubmit={handleSubmit}>\n                        <div className=\"col p-0 justify-content-end\">\n                            <input type=\"text\" className=\"form-control\" id=\"message\" placeholder=\"Enter Message\" value={message} onChange={(event) => { setMessage(event.target.value) }} />\n                        </div>\n                        <div className=\"col-md-auto p-1\">\n                            <button style={{ maxWidth: \"100px\" }} type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </>\n    )\n}\n","import { React, useState } from 'react'\n\nexport default function Login(props) {\n    const [user, setUser] = useState(\"\");\n\n    function handleUser(event) {\n        setUser(event.target.value);\n    }\n\n    function handleLogin(event) {\n        event.preventDefault();\n        props.changeUserName(user);\n    }\n\n    return (\n        <div className=\"d-flex justify-content-center align-items-center vw-100 vh-100\">\n            <div className=\"align-middle border border-secondary rounded p-4 form-group\" style={{ width: \"95%\", maxWidth: \"400px\", maxHeight: \"500px\" }}>\n                <form className=\"mx-auto align-middle\" onSubmit={handleLogin}>\n                    <label className=\"form-label\" htmlFor=\"username\">Username</label>\n                    <input className=\"form-control mb-3\" name=\"username\" id=\"username\" type=\"text\" placeholder=\"Enter Username\" value={user} onChange={handleUser}></input>\n                    <input className=\"btn btn-secondary\" type=\"submit\" value=\"Login\"></input>\n                </form>\n            </div>\n        </div>\n    )\n}\n","import { React, useState, useEffect } from \"react\";\nimport Main from \"./components/Main\";\nimport Login from \"./components/Login\";\nimport io from \"socket.io-client\";\n\nfunction App() {\n  const [username, setUsername] = useState(null);\n  const [socket, setSocket] = useState(null);\n\n  //Connect with the server only once.\n  useEffect(() => {\n    let socket = io();\n    socket.on(\"connect\", () => {\n      setSocket(socket);\n    })\n    return () => {\n      socket.off(\"connect\");\n      socket.disconnect();\n    }\n  }, [])\n\n  //Sets the username for the session\n  function changeUser(name) {\n    setUsername(name);\n    socket.emit(\"newUser\", name);\n  }\n\n  if (socket) {\n    return (\n      <div className=\"App\">\n        {username ? <Main username={username} socket={socket} /> : <Login changeUserName={changeUser} />}\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        Connecting...\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}